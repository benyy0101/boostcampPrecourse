# -*- coding: utf-8 -*-
"""GradientDescent.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18j1EF3GoVfksTH1939lO_j56JAkprnbg
"""

def f1(x):
  return x**2

def df_dx1(x):
  return 2*x

def gradient_descent(f,df_dx,init_x,learning_rate=.01, step_num = 100):
  x = init_x
  x_hist,y_hist = [x],[f(x)]

  for i in range(step_num):
    grad = df_dx(x)
    x -= learning_rate * grad

    x_hist.append(x)
    y_hist.append(f(x))

  return x_hist, y_hist

import matplotlib.pyplot as plt
import numpy as np

plt.style.use('seaborn-whitegrid')

x_init = 5
x_hist, y_hist = gradient_descent(f1,df_dx1,init_x = x_init)
print(x_hist,y_hist)
plt.scatter(x_hist,y_hist,color='red')

x = np.arange(-5,5,0.01)

plt.plot(x,f1(x))
plt.grid()
plt.show()

def f2(x):
  return .01*x**4 -.3*x**3 -1*x +10

def df_df2(x):
  return .04*x**3 - .9*x**2 - 1

x_init = -1
x_hist, y_hist = gradient_descent(f2,df_df2,init_x = x_init)
# print(x_hist,y_hist)
plt.scatter(x_hist,y_hist,color='red')

x = np.arange(-5,30,0.01)

plt.plot(x,f2(x))
plt.grid()
plt.show()

def f3(x):
  return x* np.sin(x**2) +1

def dx_df3(x):
  return np.sin(x*82) +x*np.cos(x**2)*2*x

x_init1 = -0.5
x_hist,y_hist = gradient_descent(f3, dx_df3,init_x = x_init1)
plt.scatter(x_hist,y_hist,color='red')

x_init2 = 1.5
x_hist2,y_hist2 = gradient_descent(f3, dx_df3,init_x = x_init2)
plt.scatter(x_hist2,y_hist2,color='blue')

x = np.arange(-3,3,.01)
plt.plot(x,f3(x),'--')

plt.scatter(x_init1,f3(x_init1),color='red')
plt.text(x_init1-1.0,f3(x_init1)+0.3,"x_init1 ({})".format(x_init1),fontsize=13)

plt.scatter(x_init2,f3(x_init2),color='blue')
plt.text(x_init2-1.0,f3(x_init2)+0.3,"x_init2 ({})".format(x_init2),fontsize=13)

plt.grid()
plt.show()

def gd2(f,df_dx,init_x,learning_rate =.01, step_num=100):
  eps = 1e-5
  cnt = 0

  old_x = init_x
  min_x = old_x
  min_y = f(min_x)

  x_hist,y_hist = [min_x],[min_y]

  for i in range(step_num):
    grad = df_dx(old_x)
    new_x = old_x - learning_rate * grad
    new_y = f(new_x)

    if min_y > new_y:
      min_x = new_x
      min_y = new_y

    if np.abs(old_x - new_x) <eps:
      break
    x_hist.append(old_x)
    y_hist.append(new_y)

    old_x = new_x
    cnt += 1

  return x_hist,y_hist,cnt

x_init1 = -2.2
x_hist,y_hist,cnt1 = gd2(f3, dx_df3,init_x = x_init1)
plt.scatter(x_hist,y_hist,color='red')

x_init2 = -0.5
x_hist2,y_hist2,cnt2 = gd2(f3, dx_df3,init_x = x_init2)
plt.scatter(x_hist2,y_hist2,color='blue')

x_init3 = 1.5
x_hist3,y_hist3,cnt3 = gd2(f3, dx_df3,init_x = x_init3)
plt.scatter(x_hist3,y_hist3,color='green')

x = np.arange(-3,3,.01)
plt.plot(x,f3(x),'--')

plt.scatter(x_init1,f3(x_init1),color='red')
plt.text(x_init1+0.2,f3(x_init1)+0.2,"x_init1 ({})".format(x_init1),fontsize=13)
print("count1: ",cnt1)
plt.scatter(x_init2,f3(x_init2),color='blue')
plt.text(x_init2+0.1,f3(x_init2)-0.3,"x_init2 ({})".format(x_init2),fontsize=13)
print("count2: ",cnt2)
plt.scatter(x_init3,f3(x_init3),color='green')
plt.text(x_init3-1.0,f3(x_init3)+0.3,"x_init3 ({})".format(x_init3),fontsize=13)
print("count3: ",cnt3)
plt.grid()
plt.show()

x_init = 10
x_hist, y_hist, _ = gd2(f1,df_dx1,init_x = x_init, learning_rate = 1.05)

plt.plot(x_hist,y_hist,color='red')
plt.scatter(x_init,f1(x_init),color='green')
plt.text(x_init-2.2,f1(x_init)-2,"x_init({})".format(x_init),fontsize=10)
plt.plot(x,f1(x),'--')
plt.grid()
plt.show()

lr_list = [0.001,.01,.1,1.01]

init_x =30.0
x = np.arange(-30,50,.01)
fig = plt.figure(figsize=(12,10))

for i, lr in enumerate(lr_list):
  x_hist,y_hist,cnt = gd2(f1,df_dx1,init_x = x,learning_rate = lr)
  ax = fig.add_subplot(2,2,i+1)
  ax.scatter(init_x,f1(init_x),color='green')
  ax.plt(x_hist,y_hist,color='red',linewidth='4')
  ax.plot(x,f(x),'--')
  ax.grid()
  ax.title.set_text('learning_rate = {}'.format(str(lr)))
  print("init value = {}, count = {}".format(str(lr),str(cnt)))

