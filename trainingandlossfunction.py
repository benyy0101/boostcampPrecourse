# -*- coding: utf-8 -*-
"""trainingAndLossfunction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rSgEZekw1nVNOzU3WB4uU_A3gjFS4gNR
"""

import numpy as np

def convert_one_hot(labels, num_class):
  one_hot_result = np.zeros((len(labels),num_class))

  for idx,label in enumerate(labels):
    one_hot_result[idx][label] = 1

  return one_hot_result

x_label = [1,3,4,3,4,2,0,5]

print(convert_one_hot(x_label,max(x_label)+1))

from keras.utils.np_utils import to_categorical

x_label = np.array([1,3,4,3,4,2,0,5])

one_hot_label = to_categorical(x_label)
print(one_hot_label)

from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import LabelEncoder

def convert_one_hot_sklearn(class_label):

  encoder = LabelEncoder()
  encoder.fit(class_label)
  labels = encoder.transform(class_label)
  labels = labels.reshape(-1,1)

  one_encoder = OneHotEncoder()
  one_encoder.fit(labels)
  one_labels = one_encoder.transform(labels)

  return one_labels.toarray()

marvel_labels = ['iron man','captain america','hulk','spider man','ant man']

ohe = convert_one_hot_sklearn(marvel_labels)

print(ohe)

print("One hot encoder datatype: ",type(ohe))
print("One hot encoder shape: ",ohe.shape)


classes = [3,2,1,3,0,4,5,3,0]

ohe = convert_one_hot_sklearn(classes)

print(ohe)

print("One hot encoder datatype: ",type(ohe))
print("One hot encoder shape: ",ohe.shape)

import pandas as pd

df = pd.DataFrame({'labels':['iron man','captain america','hulk','spider man','ant man']})

ohe_df = pd.get_dummies(df['labels'])
print(ohe_df)

def MAE(y,pred_y):
  return np.mean(np.abs(y - pred_y))

import matplotlib.pyplot as plt

plt.style.use('seaborn-whitegrid')

y = np.array([-3,-1,-2,1,3,-2,2,5,3,3,-2,-1,2])
yhat = np.array([1,-1,-2,1,3,-2,2,3,1,3,0,-1,2])

x = list(range(len(y)))

plt.scatter(x,y,color='b',label='True')
plt.plot(x,yhat,color='r',label='Pred')
plt.legend()
plt.grid()
plt.show()

print(MAE(y,yhat))

def MSE(y,pred_y):
  return 0.5*(np.sum(np.square(y-pred_y)))

print(MSE(y,yhat))

def CEE(y,pred_y):
  delta = 1e-7
  return -np.sum(y * np.log(pred_y + delta))

y = np.array([0,0,0,0,0,1,0,0,0,0])

yhat = np.array([0.01,0.1,.005,.0,.1,.7,.0,.03,.01,.0])

print("sum of yhat: ",np.sum(yhat))
print(CEE(y,yhat))
print("---------------------")

y = np.array([0,0,0,0,0,1,0,0,0,0])

yhat = np.array([0.01,0.1,.005,.0,.1,.03,.0,.7,.01,.0])

print("sum of yhat: ",np.sum(yhat))
print(CEE(y,yhat))

y = np.array([0,1])

yhat = np.array([0.15,0.85])

print("sum of yhat: ",np.sum(yhat))

print(CEE(y,yhat))

y = np.array([1,0])

yhat = np.array([0.15,.85])
print("sum of yhat: ",np.sum(yhat))
print(CEE(y,yhat))

